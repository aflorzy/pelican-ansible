---
- name: Install and set up Pelican Panel with prerequisites, SSL, and MariaDB configuration
  hosts: game_servers
  become: true
  vars:
    php_version: "8.3"
    domain_name: pelican.lan
    server_lan_ip: 192.168.1.101
    pelican_dir: /var/www/pelican
    pelican_template_file: pelican.conf
  pre_tasks:
    - name: Install updates
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true

  tasks:
    # Prerequisites

    - name: Install software-properties-common
      ansible.builtin.apt:
        name: software-properties-common
        state: present

    - name: Add php repository
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Install nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Install PHP and required extensions
      ansible.builtin.apt:
        name:
          - php{{ php_version }}
          - php{{ php_version }}-fpm
          - php{{ php_version }}-gd
          - php{{ php_version }}-mysql
          - php{{ php_version }}-mbstring
          - php{{ php_version }}-bcmath
          - php{{ php_version }}-xml
          - php{{ php_version }}-curl
          - php{{ php_version }}-zip
          - php{{ php_version }}-intl
          - php{{ php_version }}-sqlite3
        state: present

    - name: Install additional required packages
      ansible.builtin.apt:
        name:
          - curl
          - tar
          - unzip
        state: present

    - name: Create pelican directory
      ansible.builtin.file:
        path: "{{ pelican_dir }}"
        state: directory
        mode: "0775"

    - name: Download and extract panel
      ansible.builtin.unarchive:
        src: https://github.com/pelican-dev/panel/releases/latest/download/panel.tar.gz
        dest: "{{ pelican_dir }}"
        remote_src: true

    - name: Download and install composer
      ansible.builtin.get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-setup.php
        mode: "0755"

    - name: Install composer globally
      ansible.builtin.command: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer
      notify: Run composer installer

    # Webserver Configuration

    - name: Remove default nginx configuration
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Generate pelican.conf from template
      ansible.builtin.template:
        src: "{{ pelican_template_file }}"
        dest: /etc/nginx/sites-available/pelican.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart_nginx

    - name: Create nginx configuration symlink
      ansible.builtin.file:
        src: /etc/nginx/sites-available/pelican.conf
        dest: /etc/nginx/sites-enabled/pelican.conf
        state: link
      notify: Restart_nginx

    - name: Pun pelican environment setup
      ansible.builtin.command: php artisan p:environment:setup --url="http://{{ domain_name }}" --no-interaction
      args:
        chdir: "{{ pelican_dir }}"
      register: env_setup_output
      changed_when: env_setup_output.rc != 0

    - name: Display environment setup output
      ansible.builtin.debug:
        var: env_setup_output.stdout_lines

    - name: Set correct permissions for storage and cache directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        recurse: true
      loop:
        - "{{ pelican_dir }}/storage"
        - "{{ pelican_dir }}/bootstrap/cache"

    - name: Set correct ownership for pelican directory
      ansible.builtin.file:
        path: "{{ pelican_dir }}"
        owner: www-data
        group: www-data
        recurse: true

    - name: Create cron job for Pelican scheduler
      ansible.builtin.cron:
        name: Pelican Scheduler
        minute: "*"
        hour: "*"
        day: "*"
        month: "*"
        weekday: "*"
        job: php {{ pelican_dir }}/artisan schedule:run >> /dev/null 2>&1
        user: www-data

    - name: Set up pelican queue service
      ansible.builtin.command: php artisan p:environment:queue-service --no-interaction
      args:
        chdir: "{{ pelican_dir }}"
      register: queue_setup
      changed_when: queue_setup.rc != 0

    # Wings installation

    - name: Download Docker installation script
      ansible.builtin.get_url:
        url: https://get.docker.com/
        dest: /tmp/get-docker.sh
        mode: "0755"

    - name: Install Docker
      ansible.builtin.command: sh /tmp/get-docker.sh
      environment:
        CHANNEL: stable
      register: install_docker
      changed_when: install_docker.rc != 0

    - name: Enable and start docker service
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started

    - name: Enable linux memory swap
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: ^GRUB_CMDLINE_LINUX_DEFAULT=
        line: GRUB_CMDLINE_LINUX_DEFAULT="swapaccount=1"
      notify:
        - Update grub
        - Reboot the server

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /etc/pelican
        - /var/run/wings

    - name: Download Wings binary
      ansible.builtin.get_url:
        url: https://github.com/pelican-dev/wings/releases/latest/download/wings_linux_{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}
        dest: /usr/local/bin/wings
        mode: "0755"

    - name: Copy Wings service file
      ansible.builtin.copy:
        src: wings.service
        dest: /etc/systemd/system/wings.service
        mode: "0644"
      notify: Reload systemd

    # Completed

    - name: Congratulations!
      ansible.builtin.debug:
        msg: Refer back to README.md for instructions to complete your Pelican installation.

  handlers:
    - name: Restart_nginx
      ansible.builtin.service:
        name: nginx
        state: restarted

    - name: Run composer installer
      become: false
      community.general.composer:
        command: install
        working_dir: "{{ pelican_dir }}"
        no_dev: true
        optimize_autoloader: true

    - name: Update grub
      ansible.builtin.command: update-grub
      register: update_grub
      changed_when: update_grub.rc != 0

    - name: Reboot the server
      ansible.builtin.reboot:

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
